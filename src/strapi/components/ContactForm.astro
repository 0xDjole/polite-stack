---
import axios from 'axios';
import { config } from '../config';

export interface Props {
  formId: number; // ID of the form in Strapi
  endpoint?: string;
  submitUrl?: string;
  redirectUrl?: string;
}

const {
  formId,
  endpoint = config.endpoint,
  submitUrl = '/api/submit-form',
  redirectUrl = '',
} = Astro.props;

// Fetch the form data from Strapi
async function getForm(endpoint: string, id: number) {
  try {
    const response = await axios.get(`${endpoint}/api/forms/${id}`, {
      params: {
        populate: 'fields',
      },
    });
    return response.data.data;
  } catch (error) {
    console.error('Error fetching form:', error);
    return null;
  }
}

const form = await getForm(endpoint, formId);
const formTitle = form?.attributes?.title || 'Contact Form';
const formDescription = form?.attributes?.description || '';
const formFields = form?.attributes?.fields?.data || [];

// Unique form ID for DOM elements
const formElementId = `form-${formId}`;

// Map Strapi field types to HTML input types
function getFieldType(strapiType: string): string {
  const typeMap: Record<string, string> = {
    text: 'text',
    email: 'email',
    textarea: 'textarea',
    number: 'number',
    date: 'date',
    time: 'time',
    datetime: 'datetime-local',
    select: 'select',
    checkbox: 'checkbox',
    radio: 'radio',
    tel: 'tel',
    url: 'url',
    password: 'password',
    file: 'file',
    hidden: 'hidden',
  };

  return typeMap[strapiType] || 'text';
}
---

<div class="strapi-form">
  {
    form ? (
      <>
        {formTitle && <h2 class="form-title">{formTitle}</h2>}
        {formDescription && <p class="form-description">{formDescription}</p>}

        <form
          id={formElementId}
          action={submitUrl}
          method="POST"
          class="form"
          enctype="multipart/form-data"
        >
          <input type="hidden" name="formId" value={formId} />
          {redirectUrl && <input type="hidden" name="_next" value={redirectUrl} />}

          {formFields.map((field: any) => {
            const fieldAttributes = field.attributes;
            const fieldType = getFieldType(fieldAttributes.type);
            const fieldId = `${formElementId}-${fieldAttributes.name}`;
            const isRequired = fieldAttributes.required || false;

            return (
              <div class="form-field" data-field-type={fieldType}>
                {fieldType === 'checkbox' ? (
                  <div class="checkbox-field">
                    <input
                      type="checkbox"
                      id={fieldId}
                      name={fieldAttributes.name}
                      value="yes"
                      required={isRequired}
                    />
                    <label for={fieldId}>
                      {fieldAttributes.label}
                      {isRequired && <span class="required">*</span>}
                    </label>
                  </div>
                ) : fieldType === 'radio' ? (
                  <fieldset>
                    <legend>
                      {fieldAttributes.label}
                      {isRequired && <span class="required">*</span>}
                    </legend>
                    {fieldAttributes.options?.map((option: any, index: number) => (
                      <div class="radio-option">
                        <input
                          type="radio"
                          id={`${fieldId}-${index}`}
                          name={fieldAttributes.name}
                          value={option.value}
                          required={isRequired}
                        />
                        <label for={`${fieldId}-${index}`}>{option.label}</label>
                      </div>
                    ))}
                  </fieldset>
                ) : (
                  <>
                    <label for={fieldId}>
                      {fieldAttributes.label}
                      {isRequired && <span class="required">*</span>}
                    </label>

                    {fieldType === 'textarea' ? (
                      <textarea
                        id={fieldId}
                        name={fieldAttributes.name}
                        placeholder={fieldAttributes.placeholder || ''}
                        required={isRequired}
                      />
                    ) : fieldType === 'select' ? (
                      <select id={fieldId} name={fieldAttributes.name} required={isRequired}>
                        <option value="">-- Select {fieldAttributes.label} --</option>
                        {fieldAttributes.options?.map((option: any) => (
                          <option value={option.value}>{option.label}</option>
                        ))}
                      </select>
                    ) : (
                      <input
                        type={fieldType}
                        id={fieldId}
                        name={fieldAttributes.name}
                        placeholder={fieldAttributes.placeholder || ''}
                        required={isRequired}
                        min={fieldAttributes.min}
                        max={fieldAttributes.max}
                        pattern={fieldAttributes.pattern}
                      />
                    )}
                  </>
                )}

                {fieldAttributes.helpText && (
                  <small class="help-text">{fieldAttributes.helpText}</small>
                )}
              </div>
            );
          })}

          <button type="submit" class="submit-button">
            {form.attributes.submitText || 'Submit'}
          </button>
        </form>
      </>
    ) : (
      <div class="form-error">
        <p>Could not load form. Please try again later.</p>
      </div>
    )
  }
</div>

<style>
  .strapi-form {
    max-width: 600px;
    margin: 0 auto;
    padding: 1rem;
  }

  .form-title {
    margin-bottom: 0.5rem;
  }

  .form-description {
    margin-bottom: 1.5rem;
    color: #666;
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .form-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-field[data-field-type='checkbox'] {
    flex-direction: row;
  }

  .checkbox-field {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .checkbox-field input {
    margin: 0;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
  }

  fieldset {
    border: none;
    padding: 0;
    margin: 0;
  }

  legend {
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  label {
    font-weight: 500;
  }

  .required {
    color: red;
    margin-left: 0.25rem;
  }

  input:not([type='checkbox']):not([type='radio']),
  select,
  textarea {
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    width: 100%;
  }

  textarea {
    min-height: 120px;
    resize: vertical;
  }

  .help-text {
    color: #666;
    font-size: 0.875rem;
  }

  .submit-button {
    margin-top: 0.5rem;
    padding: 0.75rem 1.5rem;
    background-color: #3182ce;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    align-self: flex-start;
  }

  .submit-button:hover {
    background-color: #2c5282;
  }

  .form-error {
    padding: 1rem;
    background-color: #fed7d7;
    border-left: 4px solid #e53e3e;
    color: #c53030;
    border-radius: 4px;
  }
</style>
